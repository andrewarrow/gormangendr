syntax = "proto3";

option go_package = "github.com/andrewarrow/gormangendr/network";

package iohk.chain.node;

message HandshakeRequest {
  bytes nonce = 1;
}

message HandshakeResponse {
  uint32 version = 1;
  bytes block0 = 2;
  bytes node_id = 3;
  bytes signature = 4;
  bytes nonce = 5;
}

message ClientAuthRequest {
  bytes node_id = 1;
  bytes signature = 2;
}

message ClientAuthResponse {}

message TipRequest {}

message TipResponse {
  bytes block_header = 1;
}

message BlockIds {
  repeated bytes ids = 1;
}

message FragmentIds {
  repeated bytes ids = 1;
}

message PeersRequest { uint32 limit = 1; }

message PeersResponse { repeated Peer peers = 1; }

message Peer {
  // FIXME: make the port field common, indicate TCP protocol selection
  // by the field number.
  oneof peer {
    PeerV4 v4 = 1;
    PeerV6 v6 = 2;
  }
}

message PeerV4 {
  fixed32 ip = 1;
  fixed32 port = 2; // FIXME: uint32 is more efficient for port numbers
}

message PeerV6 {
  fixed64 ip_high = 1;
  fixed64 ip_low = 2;
  fixed32 port = 3; // FIXME: uint32 is more efficient for port numbers
}

message PullHeadersRequest {
  repeated bytes from = 1;
  bytes to = 2;
}

message PullBlocksToTipRequest {
  repeated bytes from = 1;
}

message PullBlocksRequest {
  repeated bytes from = 1;
  bytes to = 2;
}

message PushHeadersResponse {}

message UploadBlocksResponse {}

message Block {
  bytes content = 1;
}

message Header {
  bytes content = 1;
}

message Fragment {
  bytes content = 1;
}

message Gossip {
  repeated bytes nodes = 2;
}

message BlockEvent {
  oneof item {
    Header announce = 1;
    BlockIds solicit = 2;
    PullHeadersRequest missing = 3;
  }
}

service Node {
  rpc Handshake(HandshakeRequest) returns (HandshakeResponse);

  rpc ClientAuth(ClientAuthRequest) returns (ClientAuthResponse);

  rpc Tip(TipRequest) returns (TipResponse);

  rpc Peers(PeersRequest) returns (PeersResponse);

  rpc GetBlocks(BlockIds) returns (stream Block) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetHeaders(BlockIds) returns (stream Header) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetFragments(FragmentIds) returns (stream Fragment) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc PullHeaders(PullHeadersRequest) returns (stream Header) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc PullBlocks(PullBlocksRequest) returns (stream Block) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc PullBlocksToTip(PullBlocksToTipRequest) returns (stream Block);

  rpc PushHeaders(stream Header) returns (PushHeadersResponse);

  rpc UploadBlocks(stream Block) returns (UploadBlocksResponse);

  rpc BlockSubscription(stream Header) returns (stream BlockEvent);

  rpc FragmentSubscription(stream Fragment) returns (stream Fragment);

  rpc GossipSubscription(stream Gossip) returns (stream Gossip);
}
